# torch.nn模块实现卷积神经网络
import torch.nn as nn
import torch.nn.functional as F

class LeNet(nn.Module):
    def __init__(self):
        super().__init__()
        self.conv1 = nn.Conv2d(3, 16, 5)    # in-channel=3 out-channel(convolutional kernel)=15 kernel-size=5
        self.pool1 = nn.MaxPool2d(2, 2)    # 不指定步距stride则采用与池化核相同的步距(2, 2)
        self.conv2 = nn.Conv2d(16, 32, 5)
        self.pool2 = nn.MaxPool2d(2, 2)
        self.fc1 = nn.Linear(32*5*5, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)
    def forward(self, x):
        x = F.relu(self.conv1(x))    # input(3, 32, 32) output(16, 28, 28)
        x = self.pool1(x)    # output(16, 14, 14)
        x = F.relu(self.conv2(x))    # output(32, 10, 10)
        x = self.pool2(x)    # output(32, 5, 5)
        x = x.view(-1, 32*5*5)    # output(32*5*5)
        x = F.relu(self.fc1(x))    # output(120)
        x = F.relu(self.fc2(x))    # output(84)
        x = self.fc3(x)    # output(10)
        return x 
import torch
input1 = torch.rand([32, 3, 32, 32])
model = LeNet()
print(model)
output = model(input1)import torch
import torchvision
import torch.nn as nn
import torch.optim as optim
import torchvision.transforms as transforms
import matplotlib.pyplot as plt
import numpy as np

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
print(device)

transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]    # 前三个0.5是RGB三个通道的均值, 后三个0.5是RGB三个通道的标准差
)

# 下载50000张训练图片
trainset = torchvision.datasets.CIFAR10(root='./CNNdata', train=True,
                                        download=False, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=36,
                                          shuffle=True, num_workers=0)
# 下载10000张测试图片
testset = torchvision.datasets.CIFAR10(root='./CNNdata', train=False, 
                                       download=False, transform=transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=10000,
                                          shuffle=False, num_workers=0)

test_data_iter = iter(testloader)
test_image, test_label = next(test_data_iter)
test_image, test_label = test_image.to(device), test_label.to(device)
net = LeNet().to(device)
loss_function = nn.CrossEntropyLoss()
optimizer = optim.Adam(net.parameters(), lr=0.001)

for epoch in range(5):    # loop over the dataset multiple times

    running_loss = 0.0
    for step, data in enumerate(trainloader, start=0):
        # get the inputs: data is a list of [inputs, labels]
        inputs, labels = data
        inputs, labels = inputs.to(device), labels.to(device)
        
        # optimizer.zero_grad()
        optimizer.zero_grad()

        # forward + backward + optimize
        outputs = net(inputs)
        loss = loss_function(outputs, labels)
        loss.backward()
        optimizer.step()

        # print statistics
        running_loss += loss.item()
        if step % 500 == 499:   # print every 500 mini-batches
            with torch.no_grad():
                outputs = net(test_image)    # [batch, 10]
                predict_y = torch.max(outputs, dim=1)[1]
                accuracy = (predict_y == test_label).sum().item() / test_label.size(0)

                print(f'[{epoch+1}, {step+1}] train_loss: {running_loss/500:.3f} test_accuracy: {accuracy:.3f}')
                running_loss = 0.0
                
print('Finished Training')
sav_path = './Lenet.pth'
torch.save(net.state_dict(), sav_path)
from PIL import Image
transform = transforms.Compose(
        [transforms.Resize((32, 32)),
         transforms.ToTensor(),
         transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])

classes = ('plane', 'car', 'bird', 'cat',
           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')

net = LeNet()
net.load_state_dict(torch.load('Lenet.pth'))

im = Image.open('1.jpg')
im = transform(im)  # [C, H, W]
im = torch.unsqueeze(im, dim=0)  # [N, C, H, W]

with torch.no_grad():
    outputs = net(im)
    predict = torch.softmax(outputs, dim=1)
print(predict)
